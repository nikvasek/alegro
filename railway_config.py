#!/usr/bin/env python3
"""
Railway-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
"""

import os
import psutil
import signal
import time
import threading
from pathlib import Path

class RailwayResourceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è Railway deployment"""
    
    def __init__(self):
        self.max_memory_percent = 85
        self.max_chrome_processes = 5
        self.max_temp_files = 500
        self.cleanup_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.running = True
        
    def monitor_resources(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
                memory = psutil.virtual_memory()
                if memory.percent > self.max_memory_percent:
                    print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%")
                    self.emergency_cleanup()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Chrome –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                chrome_count = len([p for p in psutil.process_iter() if 'chrome' in p.name().lower()])
                if chrome_count > self.max_chrome_processes:
                    print(f"üö® –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ Chrome –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {chrome_count}")
                    self.kill_old_chrome_processes()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                temp_count = len(list(Path('temp_files').rglob('*'))) if Path('temp_files').exists() else 0
                if temp_count > self.max_temp_files:
                    print(f"üö® –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {temp_count}")
                    self.cleanup_temp_files()
                    
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)
    
    def emergency_cleanup(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("üßπ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        import gc
        gc.collect()
        
        # –£–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ Chrome –ø—Ä–æ—Ü–µ—Å—Å—ã
        self.kill_old_chrome_processes()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.cleanup_temp_files()
        
        print("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def kill_old_chrome_processes(self):
        """–£–±–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ Chrome –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        killed = 0
        current_time = time.time()
        
        for proc in psutil.process_iter(['pid', 'name', 'create_time']):
            try:
                if 'chrome' in proc.info['name'].lower():
                    # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å—Ç–∞—Ä—à–µ 20 –º–∏–Ω—É—Ç
                    if current_time - proc.info['create_time'] > 1200:
                        proc.kill()
                        killed += 1
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
        
        if killed > 0:
            print(f"üî™ –£–±–∏—Ç–æ {killed} —Å—Ç–∞—Ä—ã—Ö Chrome –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        temp_dir = Path('temp_files')
        if not temp_dir.exists():
            return
            
        cleaned = 0
        current_time = time.time()
        
        for file_path in temp_dir.rglob('*'):
            try:
                if file_path.is_file():
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç
                    if current_time - file_path.stat().st_mtime > 1800:
                        file_path.unlink()
                        cleaned += 1
            except:
                pass
        
        if cleaned > 0:
            print(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {cleaned} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        monitor_thread = threading.Thread(target=self.monitor_resources, daemon=True)
        monitor_thread.start()
        print("üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è Railway")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
railway_manager = None

def setup_railway_limits():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è Railway"""
    global railway_manager
    
    if os.getenv('RAILWAY_ENVIRONMENT'):
        print("üöÇ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Railway —Å—Ä–µ–¥–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤")
        railway_manager = RailwayResourceManager()
        railway_manager.start_monitoring()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(signum, frame):
            print("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            if railway_manager:
                railway_manager.stop_monitoring()
                railway_manager.emergency_cleanup()
        
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        
        return True
    return False

if __name__ == "__main__":
    setup_railway_limits()